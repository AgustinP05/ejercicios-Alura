package com.alura.jdbc.controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alura.jdbc.factory.ConnectionFactory;

import java.sql.Statement;

public class ProductoController {

	public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) throws SQLException {
		Connection con = new ConnectionFactory().recuperarConexion();
		/*Con createStatement (Funciona, pero recordar sacar el click del campo modificado)
		Statement statement = con.createStatement();
		statement.execute("UPDATE PRODUCTO SET "
		+"NOMBRE = '"+nombre+"'"
		+", DESCRIPCION = '"+descripcion+"'"
		+", CANTIDAD = "+cantidad
		+" WHERE ID= "+id);
		*/
		//Con prepareStatement
		PreparedStatement statement = con.prepareStatement("UPDATE PRODUCTO SET "
				+ "NOMBRE = ? ,"
				+ "DESCRIPCION = ? ,"
				+ "CANTIDAD = ? "
				+ " WHERE ID= ?");
		
		statement.setString(1, nombre);
		statement.setString(2, descripcion);
		statement.setInt(3, cantidad);
		statement.setInt(4, id);
		statement.execute();
		
		int updateCount = statement.getUpdateCount();
		con.close();
		return updateCount;
	}

	public void eliminar(Integer id) throws SQLException {
		Connection con = new ConnectionFactory().recuperarConexion();
		/* Con createStatement
		Statement statement = con.createStatement();
		
		statement.execute("DELETE FROM PRODUCTO WHERE ID = "+id);
		*/
		//Con prepareStatement
		PreparedStatement statement= con.prepareStatement("DELETE FROM PRODUCTO WHERE ID = ?");
		statement.setInt(1, id);
		statement.execute();
		
		statement.close();
		con.close();
	}

	public List<Map<String,String>> listar() throws SQLException {

		//Connection con = DriverManager.getConnection("jdbc:mysql://localhost/control_de_stock?useTimeZone=true&serverTimeZone=UTC","root","=)(Laorden66");
		//Lo paso a ConnectionFactory

		final Connection con = new ConnectionFactory().recuperarConexion();//Crear conexion
		try(con){
			//Con prepareStatement																						//		Con createStatement
			PreparedStatement statement = con.prepareStatement("SELECT ID,NOMBRE,DESCRIPCION,CANTIDAD FROM producto");  //		Statement statement = con.createStatement();
			statement.execute();																						//		statement.execute("SELECT ID,NOMBRE,DESCRIPCION,CANTIDAD FROM producto");//Boolean
			//////////////////////
			
			ResultSet resultSet= statement.getResultSet();
			
			List<Map<String,String>>resultado=new ArrayList<>();//Para guardar adentro los datos de cada fila
			
			while(resultSet.next()) { //Por cada vuelta tomamos una fila entera
				//	key		value
				Map<String, String> fila = new HashMap<>();
				fila.put("ID",String.valueOf(resultSet.getInt("ID")));
				fila.put("NOMBRE", resultSet.getString("NOMBRE"));
				fila.put("DESCRIPCION", resultSet.getString("DESCRIPCION"));
				fila.put("CANTIDAD",String.valueOf(resultSet.getInt("CANTIDAD")));
				
				resultado.add(fila);//Agregamos la fila al Map resultado
			}
			resultSet.close();
			statement.close();
			con.close();
			
		
			return resultado;//Retornar el resultado del Map															
		
		}//final de twr de 'con'
		
	}

    public void guardar(Map<String,String> producto) throws SQLException {
		String nombre= producto.get("NOMBRE");
		String descripcion=producto.get("DESCRIPCION");
		Integer cantidad =Integer.valueOf(producto.get("CANTIDAD"));
		Integer maximoCantidad = 50;
		
		final Connection con = new ConnectionFactory().recuperarConexion();
		try(con){
			con.setAutoCommit(false);//Para quitarle al JDBC el control del Commit y hacerlo nosotros
			
			//Con prepareStatement																//Con createStatement
			final PreparedStatement statement = con.prepareStatement("INSERT INTO PRODUCTO "	//		Statement statement = con.createStatement();
					+"(nombre, descripcion, cantidad) "											//
					+" VALUES(?,?,?)",Statement.RETURN_GENERATED_KEYS);							//		statement.execute("INSERT INTO PRODUCTO(nombre, descripcion, cantidad) "
																								//		+" VALUES('"+ producto.get("NOMBRE")+"','"
																								//		+producto.get("DESCRIPCION")+"',"
			try(statement){																		//		+producto.get("CANTIDAD")+")",Statement.RETURN_GENERATED_KEYS);
				try {																			
					do {
						int cantidadParaGuardar = Math.min(cantidad, maximoCantidad);//Para tomar el numero minimo entre los dos
						ejecutarRegistro(nombre, descripcion, cantidadParaGuardar, statement);//Se crea el registro 
					
						cantidad -= maximoCantidad; //Le restamos para que quede lo que sobre 
					}while(cantidad > 0);//Mientras cantidad sea mayor a 0, repita el codigo del bloque
				
					con.commit();
					System.out.println("COMMIT");
					
				}catch(Exception e) {
					con.rollback();
					System.out.println("ROLLBACK. OCURRIÃ“ UN ERROR");
				}
				
			 //statement.close();//Ya no es necesario gracias al twr
		    }//Fin try-with-resources
		 
		 //con.close();//Ya no es necesario gracias al twr
		}//Fin try-with-resources
    
    }

    
	private void ejecutarRegistro(String nombre, String descripcion, Integer cantidad, PreparedStatement statement)
			throws SQLException {
		//Setear a los ? en orden
		statement.setString(1, nombre);
		statement.setString(2, descripcion);
		statement.setInt(3, cantidad);

		statement.execute();
		
		/* Cerrando con close()
		//queremos tomar el valor autogenerado (ID) de cada producto
		ResultSet resultSet =statement.getGeneratedKeys();//Listado de ID's    	
		//Los iteramos
		while(resultSet.next()) {
				System.out.println("Fue insertado el producto de ID: "+resultSet.getInt(1));		
		}
		
		resultSet.close();*/
		
		//Cerrando con try-with-resources
		final ResultSet resultSet =statement.getGeneratedKeys();//Listado de ID's    
		try(resultSet){
			//Los iteramos
			while(resultSet.next()) {
				System.out.println("Fue insertado el producto de ID: "+resultSet.getInt(1));		
			}
		}
		
	}
}
