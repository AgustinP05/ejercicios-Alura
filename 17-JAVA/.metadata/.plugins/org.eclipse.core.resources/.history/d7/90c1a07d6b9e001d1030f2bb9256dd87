package ar.com.bytebank.modelo;

//javadoc. Solo los miembros publicos son mostrados en el javadoc. Los NO publicos son considerados detalles de implementacion y no pueden ser utilizados por otras clases
/**
 * 
 * @version 1.0
 * @author Agus
 *
 */

/* javadoc:
 * Project
 * Generate Javadoc
 * Elegimos el proyecto
 * Finish
 */

//Exportar JAR. Sirve para compartir la funcionalidad del proyecto
/*
 * Click derecho en el proyecto
 * En carpeta Java. click en Jar file
 * Seleccionamos que queremos compartir de ella
 * Elegimos el destino de la exportacion y le damos nombre al archivo .jar (por ejemplo bytebank-exportado.jar)
 * Finish
 * (Podemos encontrar el archivo comprimido en el destino seleccionado)
  
 Como podemos utilizar el archivo JAR?
 *Dentro de eclipse creamos un nuevo project aclarando la vamos a usar para las librerias. Por ejemplo bytebank-librerias (Un conjunto de clases exportadas en un JAR son una libreria)
 *Dentro del proyecto (No en el src), creamos una carpeta llamada lib. Arrastramos el JAR creado a dentro de esa carpeta
 *En el proyecto creamos un paquete con nombre por ejemplo ar.com.bytebank.test 
 *Adentro de ella podemos crear una clase para practicar librerias
 *En esta clase, si tenemos el proyecto principal cerrado (donde se encuentran la creacion de los metodos) aunque tengamos el exportado, no nos permitirá importar los elementos
 *Para que se nos permita, tenemos que agregar el archivo .jar que exportamos (bytebank-exportado.jar) al Build Path. Eso lo hacemos con click derecho al archivo jar, luego Build Path y Add to Build Path.
 *Build Path especifica la ruta de construcccion. Ahi se encuentran todas las librerias para compilar el proyecto
 *Luego podemos ver que aparece una carpetaReferenced Libraries que nos muestra todas las librerias dentro del Build Path, es decir las librerias dentro del proyecto
 * Podemos ver que en nuestra clase para testear, se permitira usar todos los metodos que hay dentro de las librerias (En este caso, esta libreria tenia dentro todos los metodos de bytebank que guardamos dentro) 

/*
 Toda libreria externa a nuestro proyecto, es decir que no escribamos nosotros, la llamamos dependencia
 
 JAR ejecutable. Al llamarse, automaticamente ejecutan una accion. Por ejemplo lo que hace el .exe de windows, que te ejecuta un instalador.
   */

//Abstracta.  La vamos hacer abstracta al igual que Funcionario, ya que tambien Cuenta es una clase generica

//public es un modificador de acceso. Y permite que lo que contiene pueda ser visto por todo el proyecto, pero puede pasar que no queremos que algunas variables sean públicas. Para esas usamos private.
public abstract class Cuenta implements Comparable<Cuenta>{ //Implementamos comparable para practicar ordenando listas en OrdenarLista.java en ar.com.bytebank.test
	//private double saldo; //Encapsulamos saldo. Ya no vamos a poder acceder a 'saldo' de Cuenta en otras clases
	/*protected*/protected double saldo; //La hacemos protected en lugar de private para que solo sea visible para las clases hijas. Así podemos usar la propiedad en ellas.
	private int agencia;  //(2*)Lo hacemos privado para que no pueda ser modificado su valor de manera directa, para eso vamos a crear un setter
	private int numero;	  //(2*)Lo hacemos privado para que no pueda ser modificado su valor de manera directa, para eso vamos a crear un setter
	 //Cliente titular; //Esta propiedad queremos que sea del tipo 'Cliente', es decir, titular queremos que sea una variable que se conecte con las caracteristicas de la clase Cliente. Esta variable titular la vamos a usar exclusivamente para contener dentro al cliente que estará asociado a esta cuenta.
	private Cliente titular = new Cliente(); //Cada vez que se crea una Cuenta, se crea un Cliente dentro de titular.
	
	private static int totalCuentas = 0; //Variable de la clase
	
	
	
	/**
	 *Constructor por defecto. Es decir, sin parametros. 
	 */
	public Cuenta() {
		//En este caso vacío.
	}
	//Constructor. Si queremos, podemos obligar a que se den parametros para crear la nueva instancia
	//Por lo tanto, si la empresa para la que estamos haciendo el codigo, nos dice que solo se permitirá asignar el numero de agencia al momento de crear una nueva Cuenta.
	//En ese caso, solo dejaríamos el el contructor y quitariamos el setter para imposibilitar modificaciones.
	/**
	 * Instancia una Cuenta usando agencia y numero
	 * @param agencia
	 * @param numero
	 */
	public Cuenta(int agencia, int numero) {
		if(agencia <=0 || numero <= 0) {
			System.out.println("No se permite 0 o menor.");	
		}else {
			this.agencia = agencia;
			this.numero = numero;
		}
		totalCuentas++; //Que se sume 1 en la variable de la clase
		System.out.println("Cuentas totales aqui: "+totalCuentas);
		
	}
	
	//Para que al querer imprimir Cuenta, se imprima este String y no el hash
	@Override
	public String toString() {
		String cuenta = "Numero: "+this.numero+", Agencia: "+this.agencia+", Titular: "+this.titular;
		return cuenta;
	}
	
	
	///////Esta funcion es de Oject. Se utiliza para verificar si algo es igual a otra cosa, se retornara algo
	//Siempre se sobreescribe
	@Override
	public boolean equals(Object ref){

	    Cuenta otra = (Cuenta) ref;

	    if(this.agencia != otra.agencia){
	        return false;
	    }

	    if(this.numero != otra.numero){
	        return false;
	    }

	    return true;
	}
	///////
	
	
	
	//Habiamos declarado que totalCuentas es privado para que nadie lo pueda modificar de manera directa.
	//Hacemos un getter para obtener/ver la cantidad total de cuentas en el momento que queramos
	public static int getTotalCuentas() {//Recordar que a este metodo le ponemos static para que sea una funcion de la Class y no de las instancias.
		return Cuenta.totalCuentas;
	}
	 
	
/*Como ejemplo, a la funcion depositar la vamos a hacer abstracta.
 * Recordar que para que una clase tenga metodos abstractos, obligatoriamente debe ser una clase abstracta, sino dará error.
 * Recordar que todos los hijos de una clase abstracta estan obligados a tener en su codigo los metodos abstractos y sobreescribirlos.	
		
	//ACLARACION Si tiene void, no retorna nada
	 public void depositar(double valor){ //Recordar definir el tipo de variable en el parametro
		//Para sumar en el saldo de la cuenta que se especifica
		 this.saldo = this.saldo + valor; //Aumentamos el saldo actual 
	 }
	 
	 depositar abstracta. 
	 Al ser abstracta, no puede tener implementacion dentro de ella, 
	 Aquí solo tiene que ser la firma (visibilidad variable nombre parametros). 
	 Usamos métodos abstractos cuando queremos "forzar" a un hijo concreto (clase concreta) a implementar un método.  Garantizan que el hijo implemente un comportamiento.
	 */
	public abstract void depositar(double valor);//Firma de clase abstracta
/////////////////
	
	 //Retorna valor tipo booleano
	 //Por que nos importa que estas funciones puedan retornar true o false? 
	 //Porque tal vez despues queremos determinar: Si el retiro funciona bien, será true y podemos hacer que retorne un mesaje. Y si es false otra cosa.
	 /*public boolean retirar(double valor) {
		 if(this.saldo >= valor){
			 this.saldo -= valor;
			 return true;//Como esta funcion es booleana, tenemos que aclarar que va a retornar true o false
		 }else {return false;} //Sino retorna falso
	 }*/
	 /**
	  * Retirar dinero de la cuenta. Si hay algun error lanza una exception
	  * @param valor
	  * @throws SaldoInsuficienteException
	  */
	 public void retirar(double valor) throws SaldoInsuficienteException {
		 if(this.saldo < valor){//Una buena practica es poner arriba el control de errores en validaciones y luego la accion que se quiere hacer si no hay error. 
			 throw new SaldoInsuficienteException("No tienes saldo");
		 }else {
			 this.saldo -= valor;
		 }
	 }
	 
	 
	 //Hacemos lo mismo acá
	 /*public boolean transferir(double valor,Cuenta cuentaDestino) {
		 if(this.saldo >= valor) {
			this.retirar(valor);		  //Quitamos de la primera cuenta
			cuentaDestino.depositar(valor);//Agregamos a la segunda cuenta
			return true;
		 }return false;//Sino retorna falso
	 }*/
	 public void transferir(double valor,Cuenta cuentaDestino) {
			this.retirar(valor);		  //Quitamos de la primera cuenta
			cuentaDestino.depositar(valor);//Agregamos a la segunda cuenta
	 }
	 
	 
	 
	//Para obtener un valor, por costumbre en JAVA se le suele poner get al principio del nombre
	 public double getSaldo() {
		 return saldo;
	 }
	 //saldo no tiene setter ya que queremos que el saldo solo sea manipulado por los metodos depositar y retirar
	 
	 
	 
	 /*Lo comento porque en el ejercicio, nos dicen que solamente se puede asignar el valor cuando se crea una nueva cuenta. Y que no se va a poder modificar despues. Por lo tanto, no hace falta un setter
	//2* Vamos a hacer un setter (modificador) para agencia para poder asignarle un numero de agencia, y como la propiedad es privada, no podrá ser modificada de manera directa por otro
	 public void setAgencia(int numAgencia) {//Es void para que no retorne nada, ya que solo queremos asignar un valor y nadamas.
		 if(numAgencia > 0) {
			 this.agencia = numAgencia; 
		 }else {
			 System.out.println("No puede ser negativo");
		 }
	 
	 }
	 //Esto fue para asignarle, pero si luego quiero obtener/ver el numero de agencia de alguna cuenta
	 */
	 //Voy a hacer un getter de eso
	 public int getAgencia() { //Este no tiene void porque SI queremos que nos retorne un valor
		return agencia;
	}
	 
	 
	//2* Lo mismo con numero
	 public void setNumero(int num) {
		 if(num > 0) {
			 this.numero = num; 
		 }else {
			 System.out.println("No puede ser negativo");
		 }
	 }
	 //getter para verlo
	 public int getNumero() {//Este no tiene void porque SI queremos que nos retorne un valor
		return numero;
	}
	 
	 public Cliente getTitular() {
			return titular;
		}

	public void setTitular(Cliente titular) {
			this.titular = titular;
		}
	
	
	//Viene de la interfaz Comparable. Ya que queremos comparar una lista en el archivo OrdenarLista.java
	@Override
	public int compareTo(Cuenta o) {
		//Queremos establecer que el Orden Natural será por numero de agencia
		//Podriamos hacerlo con cualquiera de las formas que vimos en el comparator de OrdenarLista.java.
		//En este caso voy a usar la forma Wrapper que vimos
		//return Integer.compare(this.agencia, o.getAgencia());
		
		//Queremos establecer que el Orden Natural será por numero de agencia
		return Double.compare(this.saldo, o.getSaldo());
	}
	
	

}
