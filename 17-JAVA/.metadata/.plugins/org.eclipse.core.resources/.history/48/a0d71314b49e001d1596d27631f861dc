package ar.com.bytebank.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import ar.com.bytebank.modelo.Cliente;
import ar.com.bytebank.modelo.Cuenta;
import ar.com.bytebank.modelo.CuentaAhorros;
import ar.com.bytebank.modelo.CuentaCorriente;

public class TestLambda {
	public static void main(String[] args) {
		
		//Codigo Cuenta para ejercicio:
		Cuenta cc1 = new CuentaCorriente(33, 33);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNombre("Nico");
		cc1.setTitular(clienteCC1);
		cc1.depositar(333.0);

		Cuenta cc2 = new CuentaAhorros(11, 44);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNombre("Guilermo");
		cc2.setTitular(clienteCC2);
		cc2.depositar(444.0);

		Cuenta cc3 = new CuentaCorriente(22, 11);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNombre("Paulo");
		cc3.setTitular(clienteCC3);
		cc3.depositar(111.0);

		Cuenta cc4 = new CuentaAhorros(44, 22);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNombre("Ana");
		cc4.setTitular(clienteCC4);
		cc4.depositar(222.0);

		List<Cuenta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);
		/////////////////
		
//////////Ordenar por numero 
				//Forma anonima  ()
		lista.sort((Cuenta o1, Cuenta o2)->{//A diferencia de OdenarLista.java, podemos ver que recortamos codigo. Ya que java ejecuta automaticamente lo que obviamos aqu√≠
				return Integer.compare(o1.getNumero(), o2.getNumero());
			}
		});
		
		
		for(Cuenta cuenta : lista) {//ForEach para mostrar el numero de cuentas antes de ordenarlas
			System.out.println(cuenta.getNumero());
		}
		
///////Ordenar por nombre		
		//Forma antigua anonima
		Collections.sort(lista, new Comparator<Cuenta>() {
			@Override
			public int compare(Cuenta o1, Cuenta o2) {
				String nom1 = o1.getTitular().getNombre();
				String nom2 = o2.getTitular().getNombre();
				return nom1.compareTo(nom2);
			}
		});
		
		for(Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
//////////
		
	}
}
